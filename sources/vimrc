" Vimrc

" === TODO ===

" === General ===

set nocompatible               " Avoid compatibility features
set enc=utf-8                  " Sets vim character set
set fileencoding=utf-8         " Sets file encoding
set t_Co=256                   " 256 colors
syntax on                      " Enable syntax highlighting
set background=dark            " Dark background
colorscheme flatland           " Color scheme
set backspace=indent,eol,start " Guarantee backspace functionality
filetype indent off            " Disable filetype plugins and auto indentation
let mapleader = " "            " Set leader key
set modelines=1                " Allow mode line for this file
set wildmenu                   " Display wildmenu options
                               " set cursorline                 " Always show cursorline
set hidden                     " Hide windowless buffers
set clipboard=unnamed          " Paste to system clipboard register
set autoread
set fillchars=eob:\ 


" === Plugins ===

call plug#begin() " Load vim-plug

Plug 'junegunn/fzf.vim'                 " fzf(.vim) fuzzy search
Plug 'preservim/nerdtree'               " file tree
Plug 'tpope/vim-fugitive'               " git integration
Plug 'tpope/vim-rhubarb'                " github integration
Plug 'majutsushi/tagbar'                " displays tags within files
Plug 'junegunn/vim-easy-align'          " utility for aligning text
Plug 'vim-airline/vim-airline'          " custom statusline
Plug 'vim-airline/vim-airline-themes'   " airline color schemes
Plug 'junegunn/rainbow_parentheses.vim' " matching recursive paren matching
Plug 'dense-analysis/ale'
Plug 'github/copilot.vim'

call plug#end()

set rtp+=/opt/homebrew/opt/fzf

" vim-plug
nnoremap <leader>pi :PlugInstall<cr>
nnoremap <leader>pu :PlugUpdate<cr>
nnoremap <leader>ps :PlugStatus<cr>
nnoremap <leader>pc :PlugClean<cr>

" ale
let g:ale_completion_enabled = 1
let g:ale_virtualtext_cursor = 'current'
let g:ale_sign_error = '>'
let g:ale_sign_warning = '-'
let g:ale_floating_preview = 1
nnoremap <Tab> :ALEHover<cr>

let g:ale_linters = { 'python': ['pylsp', 'ruff'] , 'javascript': [ 'eslint'], 'typescript': [ 'eslint'], 'typescriptreact': [ 'eslint']}
let g:ale_fixers = { 'python': ['ruff_format'] , 'go': ['gofmt'], 'javascript': ['eslint'], 'typescript': [  'eslint','prettier-eslint'], 'typescriptreact': ['eslint']}
let g:ale_lint_on_text_changed = 0
let g:ale_fix_on_save = 1

nmap <silent> <C-k> <Plug>(ale_previous_wrap)
nmap <silent> <C-j> <Plug>(ale_next_wrap)

" vim-airline
let g:airline_theme='simple'
let g:airline_powerline_fonts = 1
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#formatter = 'unique_tail_improved'
let g:airline#extensions#whitespace#checks = ['indent', 'mixed-indent-file', 'conflicts']
"let g:airline_section_b = airline#section#create(['%t', ' ', '%m', '%y', ' ', '%r', 'readonly'])
"let g:airline_section_c = airline#section#create(['tagbar'])
"let g:airline_section_gutter = airline#section#create(['%='])
"let g:airline_section_x = airline#section#create([])
"let g:airline_section_y = airline#section#create(['%03b', ' ', '0x%02B'])
"let g:airline_section_z = airline#section#create(['%c', ' : ', '%l', '/', '%L', ' (', '%p', '%%)'])

" fzf
nnoremap <leader>d :Files .<cr>
nnoremap <leader>g :GFiles<cr>
nnoremap <leader>h :Helptags<cr>
nnoremap <leader><Tab> :History:<cr>
nnoremap <leader>b :Buffers<cr>
nnoremap <leader>m :Marks<cr>
nnoremap <leader>c :Commits<cr>
nnoremap <leader>/ :Rg<cr>
let g:fzf_layout = { 'down': '~30%' }

" vim-easy-align
xmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)

" tagbar
nnoremap <leader>t :TagbarToggle<cr>

" === Keybindings ===

" Movement
nnoremap J }
nnoremap K {
nnoremap , "
nnoremap : gT
nnoremap " gt
nnoremap L <PageUp>zz
nnoremap H <PageDown>zz

" Panes
nmap <Up> <C-w>k
nmap <Down> <C-w>j
nmap <Left> <C-w>h
nmap <Right> <C-w>l
imap <Up> <Esc><C-w>k
imap <Down> <Esc><C-w>j
imap <Left> <Esc><C-w>h
imap <Right> <Esc><C-w>l

" Jumps
nnoremap ; <C-o>
nnoremap ' <C-i>

" Folds
nnoremap <leader><Space> za

" Tabs
nnoremap <leader>n :tabnew<cr>

" Misc
"nnoremap <Tab> K
nnoremap , :
inoremap jk <Esc>
nmap <enter> o<Esc>
cnoremap <c-w> <home>\<<end>\>
nnoremap \ :nohlsearch<CR>
nnoremap <S-u> <C-r>
nnoremap <leader>s :so ~/.vimrc<cr>
" nnoremap <Tab> :Explore<cr> " make repeatedly useable somehow
nnoremap Q @
nnoremap q <Esc>  " get rid of this stupid macro key

" Marks
nnoremap M `

" Save and quit
nnoremap <leader>w :w<cr>

" === Commands ===

set history=1000 undolevels=1000 " Save more history and undo levels
set showcmd report=0             " Show current command info
set warn                         " Warn if executing shell command without save
set wildmode=list:longest,full   " Complete to longest common string and list possible matches, then iterate
set suffixes+=.class,.pdf,.pyc   " Give compiled files, etc, lower priority in wildcard matching

" === Display ===

set number relativenumber    " Show line numbers (absolute for current line, relative for others)
set scrolloff=2              " Show 2 lines of context when scrolling and during search
set display=lastline         " Show parts of lines that are cut off at the bottom
set shortmess+=Ia            " Do not display intro message at start and shorten all file messages
set textwidth=0 wrapmargin=0 " Do not auto newline beyond a certain width
set lazyredraw               " Redraw screen only when necessary
set laststatus=2             " Status bar always visible
set showtabline=2            " Always show tabline

let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 0
let g:netrw_altv = 1
let g:netrw_winsize = 25

" === Spacing ===

set expandtab                " Use spaces instead of tabs
set tabstop=4                " Display tabs as 4 spaces (necessary for retab)
set softtabstop=4            " Tab in insert mode inserts 4 spaces
set shiftwidth=4 shiftround  " Insert 4 spaces per tab when shifting, rounding to the nearest tab
set autoindent               " Copy indentation of current line for new lines
set pastetoggle=<F3>         " Toggles auto formatting of pasted material

" === Autocommands ===

augroup auto
    " Override tabbing settings for css, html, js with 2 spaces per tab
    autocmd FileType typescriptreact,javascriptreact,typescript,javascript,css,html,js,yaml setlocal expandtab tabstop=2 softtabstop=2 shiftwidth=2
augroup END

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   "rg -S --column --line-number --no-heading --color=always --colors '\''line:fg:yellow'\'' --colors '\''path:fg:green'\'' --colors '\''match:style:bold'\'' ".shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)


" === Search ===

set hlsearch             " Highlight search matches
set incsearch            " Search incrementally, i.e. as queries are typed
set ignorecase smartcase " Ignore case for search, but override for capitalized queries

" === Backups ===

set backup writebackup        " Enable backups
set viminfo+=n~/.vim/viminfo  " Set viminfo location
set dir=~/.vim,/var/tmp       " Set swapfile directory
set backupdir=~/.vim,/var/tmp " Set backup directory
